/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HeadquatersEnterprise;
import Business.Network.Network;
import Business.Organization.AdminOrganization;
import Business.Organization.AdministratorOrganization;
import Business.Organization.CareTakerOrganization;
import Business.Organization.CorporateOrganization;
import Business.Organization.GovernmentOrganization;
import Business.Organization.HeadquatersOrganization;
import Business.Organization.InvestorOrganization;
import Business.Organization.LogisticOrganization;
import Business.Organization.NGOOrganization;
import Business.Organization.Organization;
import Business.Organization.SupplierOrganization;
import Business.Role.AdminRole;
import Business.Role.CareTaker;
import Business.Role.Corporate;
import Business.Role.Government;
import Business.Role.HeadquaterManager;
import Business.Role.Investor;
import Business.Role.Logistics;
import Business.Role.NGO;
import Business.Role.Supplier;
import Business.Role.SystemAdmin;
import Business.User.User;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;


/**
 * @author Alekhya
 * @author Apeksha
 * @author Shalini
 */
public class LoginJPanel extends javax.swing.JPanel {

    EcoSystem system;
    private JPanel userProcessContainer;

    /**
     * Creates new form LoginJPanel
     */
    LoginJPanel(JPanel userProcessContainer, String logger, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        Heading.setText(logger);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnLogin = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();
        btnBAck = new javax.swing.JButton();
        Heading = new javax.swing.JLabel();
        welcomeLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 51, 51));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Username:");

        txtUsername.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Password:");

        btnLogin.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        txtPassword.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        btnBAck.setBackground(new java.awt.Color(255, 255, 255));
        btnBAck.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/back.png"))); // NOI18N
        btnBAck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBAckActionPerformed(evt);
            }
        });

        Heading.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        Heading.setForeground(new java.awt.Color(255, 255, 255));

        welcomeLabel.setIcon(new ImageIcon(getClass().getResource("/Images/welcome_back.gif")));
        welcomeLabel.setBackground(new java.awt.Color(255, 153, 153));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnBAck))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(btnLogin))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtUsername)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(btnBAck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(welcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(Heading, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnLogin)))
                .addGap(118, 118, 118))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:

//        String userName = txtUsername.getText();
//        char[] passwordCharArray = txtPassword.toString().toCharArray();
//        String password = String.valueOf(passwordCharArray);
//
//        //Check in the system admin
//        if(system.getUserAccountDirectory().authenticateUser(userName, password)!=null){
//            AdminWorkAreaJPanel panel = new AdminWorkAreaJPanel(userProcessContainer, system);
//            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//            userProcessContainer.add("AdminWorkAreaJPanel", panel);
//            layout.next(userProcessContainer);
//        }
//        else if(system.getUserDirectory().authenticateUser(userName, password)!=null){
//            
//            InformerJPanel panel = new InformerJPanel(userProcessContainer, system);
//            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//            userProcessContainer.add("InformerJPanel", panel);
//            layout.next(userProcessContainer);
//        }
//        else if(system.getEmployeeDirectory().authenticateUser(userName, password)!=null){
//            Employee emp = system.getEmployeeDirectory().authenticateUser(userName, password);
//            
//            GovernmentJPanel panel = new GovernmentJPanel(userProcessContainer, new GovernmentEnterprise(),system);
//            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//            userProcessContainer.add("GovernmentJPanel", panel);
//            layout.next(userProcessContainer);
//            
//        }else
//            JOptionPane.showMessageDialog(null, "Invalid credentials");
//           // Get user name and password
        String userName = txtUsername.getText();
        char[] passwordCharArray = txtPassword.getPassword();
        String password = String.valueOf(passwordCharArray);
        Enterprise inEnterprise = null;
        Organization inOrganization = null;
        UserAccount userAccount = null;

        //Check in the system admin
        userAccount = system.getUserAccountDirectory().authenticateUser(userName, password);
        inEnterprise = null;
        if(userAccount != null)
            inOrganization = new AdministratorOrganization();
        
        //check for admin in network
        if(userAccount == null){
            for(Network network : system.getNetworkList()){
                for (UserAccount ua : network.getUserAccountDirectory().getUserAccountList()){
                    System.out.println(ua.getUsername()+" "+ua.getPassword());
                    if (ua.getUsername().equals(userName) && ua.getPassword().equals(password)) {
                        inOrganization = new AdminOrganization();
                        userAccount =ua;
                    }
                }
            }
        }
        
        //check for employee in each network/enterprise/organization
        if (userAccount == null) {
            for (Network network : system.getNetworkList()) {
                for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                        for (UserAccount ua : o.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getUsername().equals(userName) && ua.getPassword().equals(password)) {
                                userAccount = ua;
                                if (ua.getRole() instanceof CareTaker) {
                                    inEnterprise = e;
                                    inOrganization = o;
                                    break;
                                } else if (ua.getRole() instanceof Corporate) {
                                    inEnterprise = e;
                                    inOrganization = o;
                                    break;
                                } else if (ua.getRole() instanceof Government) {
                                    inEnterprise = e;
                                    inOrganization = o;
                                    break;
                                } else if (ua.getRole() instanceof HeadquaterManager) {
                                    inEnterprise = e;
                                    inOrganization = o;
                                    break;
                                } else if (ua.getRole() instanceof Investor) {
                                    inEnterprise = e;
                                    inOrganization = o;
                                    break;
                                } else if (ua.getRole() instanceof Logistics) {
                                    inEnterprise = e;
                                    inOrganization = o;
                                    break;
                                } else if (ua.getRole() instanceof NGO) {
                                    inEnterprise = e;
                                    inOrganization = o;
                                    break;
                                } else if (ua.getRole() instanceof Supplier) {
                                    inEnterprise = e;
                                    inOrganization = o;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (userAccount == null) {
            JOptionPane.showMessageDialog(null, "Invalid credentials");
            return;
        } else {
            System.out.println(inEnterprise+" "+inOrganization+" "+userAccount.getUsername());
            txtUsername.setText("");
            txtPassword.setText("");
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("workArea", userAccount.getRole().createWorkArea(userProcessContainer, userAccount, inOrganization, inEnterprise, system));
            layout.next(userProcessContainer);
        }

    }//GEN-LAST:event_btnLoginActionPerformed

    private void btnBAckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBAckActionPerformed
        // TODO add your handling code here:

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.remove(this);
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBAckActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Heading;
    private javax.swing.JButton btnBAck;
    private javax.swing.JButton btnLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JLabel welcomeLabel;
    // End of variables declaration//GEN-END:variables
}
